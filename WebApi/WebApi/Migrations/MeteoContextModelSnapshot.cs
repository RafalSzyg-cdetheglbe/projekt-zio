// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Models.DbEntities.AuditAndContext;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(MeteoContext))]
    partial class MeteoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebApi.Models.DbEntities.AuditAndContext.BaseAuditData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BaseAudits");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseAuditData");
                });

            modelBuilder.Entity("WebApi.Models.DbEntities.MeteoEntities.MeteoData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuditDataId")
                        .HasColumnType("int");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeteoStationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditDataId");

                    b.HasIndex("MeteoStationId");

                    b.ToTable("MeteoData");
                });

            modelBuilder.Entity("WebApi.Models.DbEntities.MeteoEntities.MeteoStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("MeteoStations");
                });

            modelBuilder.Entity("WebApi.Models.DbEntities.UserEntities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserAuditId")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAuditId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApi.Models.DbEntities.UserEntities.UserAudit", b =>
                {
                    b.HasBaseType("WebApi.Models.DbEntities.AuditAndContext.BaseAuditData");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("UserAudit");
                });

            modelBuilder.Entity("WebApi.Models.DbEntities.MeteoEntities.MeteoData", b =>
                {
                    b.HasOne("WebApi.Models.DbEntities.AuditAndContext.BaseAuditData", "AuditData")
                        .WithMany()
                        .HasForeignKey("AuditDataId");

                    b.HasOne("WebApi.Models.DbEntities.MeteoEntities.MeteoStation", null)
                        .WithMany("MeteoData")
                        .HasForeignKey("MeteoStationId");

                    b.Navigation("AuditData");
                });

            modelBuilder.Entity("WebApi.Models.DbEntities.MeteoEntities.MeteoStation", b =>
                {
                    b.HasOne("WebApi.Models.DbEntities.UserEntities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("WebApi.Models.DbEntities.UserEntities.User", b =>
                {
                    b.HasOne("WebApi.Models.DbEntities.UserEntities.UserAudit", "UserAudit")
                        .WithMany()
                        .HasForeignKey("UserAuditId");

                    b.Navigation("UserAudit");
                });

            modelBuilder.Entity("WebApi.Models.DbEntities.MeteoEntities.MeteoStation", b =>
                {
                    b.Navigation("MeteoData");
                });
#pragma warning restore 612, 618
        }
    }
}
